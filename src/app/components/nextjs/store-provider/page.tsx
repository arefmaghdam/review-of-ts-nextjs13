import React, { FC } from "react";
import CodePreview from "../../code-preview/code-preview";
import Link from "next/link";

const StoreProvider: FC = () => {
  return (
    <div>
      <Link href="/">back</Link>
      <CodePreview
        imgURL=""
        content={`
    // now we should have a store that cantains our slices, so we should to create a redux/store.ts:
    // in next step we use slice and store to create provider using react-redux package
    // provider is a interface between our app and redux toolkit
    // we should create a redux/storeProvider.ts file 

    // store.ts codes:

    import { configureStore } from '@reduxjs/toolkit';
    import cartSliceReducer from './slices/cartSlice';

    const store = configureStore({
      reducer: {
        cart: cartSliceReducer
      }
    });

    export default store;

    // storeProvider.ts codes:

    "use client"

    import {Provider} from "react-redux"
    import {store} from "./store"

    export function StoreProvider({children}) {
        return <Provider store={store}>{children}</Provider>
    }

    // layout.tsx codes:

    import type { Metadata } from "next";
    import { Inter } from "next/font/google";
    import "./globals.css";
    import App from "@/components/App";
    import {StoreProvider} from "../redux/StoreProvider"

    const inter = Inter({ subsets: ["latin"] });

    export const metadata: Metadata = {
      title: "Create Next App",
      description: "Generated by create next app",
    };

    export default function RootLayout({
      children,
    }: {
      children: React.ReactNode;
    }) {
      return (
        <html lang="en">
          <body className={'{inter.className} bg-slate-950 text-slate-100'}>
            <StoreProvider>
                <App>{children}</App>
            </StoreProvider>
          </body>
        </html>
      );
    }
      `}
      />
    </div>
  );
};

export default StoreProvider;
